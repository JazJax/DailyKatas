/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import java.io.File

class App(gridSize: Int = 25) {
    lateinit var snake: Snake
    lateinit private var grid: Grid
    // private var gridSize: Int = 25

    init {
        grid = Grid(gridSize)
        var startingSquare: Int = gridSize/2
        snake = Snake(arrayOf<Pair<Int,Int>>(Pair(startingSquare, startingSquare)))
    }

    val greeting: String
        get() {
            return "Hello World!"
        }
    
    fun printGrid(): String {
        return grid.printGrid()
    }
}

data class Grid(val size: Int) {
    val emptySpace: Char = 'â¯€'
    lateinit var values: Array<Array<Char>>

    init {
        // val row: Array<Char> = Array(size){emptySpace}
        // values = Array(size){ row }
        values = Array(size){ Array(size){emptySpace} }
    }

    fun updateSnakePosition(snake: Snake):Grid {
        setCell(Pair(1,1), 'X')
        return this
    }

    fun setCell(coOrds: Pair<Int,Int>, newValue: Char): Grid {
        // values[coOrds.first][coOrds.second] = newValue
        values[0][2] = newValue
        return this
    }

    fun printGrid(): String {
        val builder = StringBuilder()
        this.values.forEach() {
            builder.appendLine(it.contentToString())
        }
        val output = builder.toString().trim()
            .replace("[","| ").replace("]"," |").replace(",","")
        print(output)
        return output
    }
}

data class Snake(val coOrds: Array<Pair<Int,Int>>) {

    var snakeSquares: Array<Pair<Int,Int>> = coOrds
    var length: Int = snakeSquares.size
}

fun main() {
    val coOrd = Pair(1,2)
        println(coOrd.first)
        println(coOrd.second)
    val app = App()
    app.printGrid()
}
